#! /usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright 2019 Alex Woroschilow (alex.woroschilow@gmail.com)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITION
import os
import sys
import glob

source = '/sys/bus/i2c/devices'
if not os.path.exists(source): sys.exit()
# The /sys/devices/.../power/control attribute allows the user
# space to control the run-time power management of the device.
#
# All devices have one of the following two values for the
# power/control file:
#
# + "auto\n" to allow the device to be power managed at run time;
# + "on\n" to prevent the device from being power managed;
#
# The default for all devices is "auto", which means that they may
# be subject to automatic power management, depending on their
# drivers.  Changing this attribute to "on" prevents the driver
# from power managing the device at run time.  Doing that while
# the device is suspended causes it to be woken up.
for device in glob.glob('{}/i2c-*'.format(source)):
    power_control = '{}/power/control'.format(device)
    if not os.path.exists(power_control): continue
    with open(power_control, 'w', errors='ignore') as stream:
        stream.write('on')
