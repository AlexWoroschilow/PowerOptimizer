#! /usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright 2019 Alex Woroschilow (alex.woroschilow@gmail.com)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITION
import os
import sys
import glob

source = '/sys/bus/usb/devices'
if not os.path.exists(source): sys.exit()
# https://www.kernel.org/doc/Documentation/usb/power-management.txt
#
# According to the docs, there were several changes to the USB power management from kernels 2.6.32, which seem to settle in 2.6.38. Now you'll need to wait for the device to become idle, which is governed by the particular device driver. The driver needs to support it, otherwise the device will never reach this state. Unluckily, now the user has no chance to force this. However, if you're lucky and your device can become idle, then to turn this off you need to:
#
# echo "0" > "/sys/bus/usb/devices/usbX/power/autosuspend"
# echo "auto" > "/sys/bus/usb/devices/usbX/power/level"
# or, for kernels around 2.6.38 and above:
#
# echo "0" > "/sys/bus/usb/devices/usbX/power/autosuspend_delay_ms"
# echo "auto" > "/sys/bus/usb/devices/usbX/power/control"
# This literally means, go suspend at the moment the device becomes idle.
#
# So unless your fan is something "intelligent" that can be seen as a device and controlled by a driver, you probably won't have much luck on current kernels.
for device in glob.glob('{}/*'.format(source)):

    power_level = '{}/power/level'.format(device)
    if os.path.exists(power_level) and os.path.isfile(power_level):
        with open(power_level, 'w', errors='ignore') as stream:
            stream.write('auto')

    power_control = '{}/power/control'.format(device)
    if os.path.exists(power_control) and os.path.isfile(power_control):
        with open(power_control, 'w', errors='ignore') as stream:
            stream.write('auto')

    autosuspend = '{}/power/autosuspend_delay_ms'.format(device)
    if os.path.exists(autosuspend) and os.path.isfile(autosuspend):
        with open(autosuspend, 'w', errors='ignore') as stream:
            stream.write('0')

    autosuspend = '{}/power/autosuspend'.format(device)
    if os.path.exists(autosuspend) and os.path.isfile(autosuspend):
        with open(autosuspend, 'w', errors='ignore') as stream:
            stream.write('0')
